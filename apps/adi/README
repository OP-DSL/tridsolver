/*
 * Open source copyright declaration based on BSD open source template:
 * http://www.opensource.org/licenses/bsd-license.php
 *
 * This file is part of the scalar-tridiagonal solver distribution.
 *
 * Copyright (c) 2015, Endre László and others. Please see the AUTHORS file in
 * the main source directory for a full list of copyright holders.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * The name of Endre László may not be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY Endre László ''AS IS'' AND ANY
 * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL Endre László BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

Scalar tridiagonal solver for CPU, MIC and GPU 
====================================================
by Endre László12, Mike Giles1 and Jeremy Appleyard3
laszlo.endre@itk.ppke.hu 

1) University of Oxford, Oxford, UK
2) Pázmány Péter Catholic University, Budapest, HU
3) NVIDIA Corporation Ltd., San Jose, CA, US

Last modified: 7th October 2015


Introduction
============

The present directory contains the source code to solve the 3D heat diffusion PDE. This parabolic PDE is solved with the ADI (Alternating Direction Implicit) method on CPU,GPU and MIC processor architectures. The ADI method requires solving 3 sets of systems of tridiagonal equations. In the present implementation the tridiagonal solver along the X dimension requires data access in global memory with long stride. This gives a poor performance for the X simensional solver comapred to the Y and Z dimensional solvers. The scalar tridiagonal solver of the tridsolver library is used to calulate the solution using the efficient algorithms in the library -- see the tridsovler/scalar/README file for more deatils on the solvers. Implementations for CPUs (multicore with SIMD), Xeon Phi and CUDA based GPUs (nVidia Fermi and Kepler) can be built.  

Software requirements
--------------------- 
1. Intel compiler (version >=15.0)
2. Intel Math Kernel Library (version >=11.2)
3. NVIDIA CUDA compiler (version >=7.0) 
4. CMake (version >=2.8.8)
5. Make utilities

Hardware requirements 
---------------------
1. CPU: AVX or AVX2 support (Sandy Bridge architecture and beyond)
2. GPU: CUDA Compute Capability >=3.5 (Kepler architecture and beyond)
3. MIC: IMCI support (Knights Corner architecture and beyond)

Building the project
--------------------
The ADI solver project is built using the standard CMake procedure. It is recommended to build the library with the out-of-source build method. Eg.:
</home/user/tridsolver/apps/adi/>
$ mkdir build
$ cd build
$ cmake .. -DCMAKE_BUILD_TYPE=Release -DBUILD_FOR_CPU=ON -DBUILD_FOR_GPU=ON
$ make
$ make install

Executing the code
------------------
Before exeucting the binaries set the path to the libtrid libraries. On Linux systems with Bash shell eg.: export LD_LIBRARY_PATH+=:/home/user/tridsolver/scalar/build/lib.

By default the adi_<cpu|cpu_mkl|mic|mic_mkl|cuda> executables run with a preset parameter configuration. This configuration can be set with options -- execute the binary with the --help option to see the available options: eg. ./adi_cpu --help

Notes
-----
1. `make install` copies files into the build library: build/include and build/lib
2. By default building code for any architecture (CPU,GPU and MIC) is disabled. To enable the build for a specified architecture set the BUILD_FOR_<CPU|GPU|MIC> CMake definitions to ON as in the example above: -DBUILD_FOR_CPU=ON 
3. Please note, that the build works only with Intel compilers as the dvec.h header file and its dependencies are not part of the GCC project.
4. For debugging the build procedure use the `VERBOSE=1 make` instead of `make`. This will report all the steps (compile and link lines) made by the make build system.
5. When building the code for CPU or MIC a version of the project with the Intel MKL library is also built automatically.























MIC Offload
-----------
When executin adi_phi_offload the MIC_LD_LIBRARY_PATH needs to be set properly:
eg.
MIC_LD_LIBRARY_PATH=/opt/intel/composer_xe_2015.2.164/compiler/lib/mic

The COI (offload library) runtime picks up the library path from this variable and automatically trasnfers it to the MIC.  




